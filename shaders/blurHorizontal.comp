#version 450

//local_size_x
const int GROUP_SIZE = 128;
//kernel size is limitied by MAXIMUM_KERNEL_WIDTH * 2 + 1
const int MAXIMUM_KERNEL_WIDTH = 32;
layout (local_size_x = GROUP_SIZE, local_size_y = 1) in;
layout (set = 0, binding = 0, rgba8) uniform readonly mediump image2D inputImage;
layout (set = 0, binding = 1, rgba8) uniform writeonly mediump image2D resultImage;

layout(std430, set = 1, binding = 0) readonly buffer Weights {
    layout(align = 4) float weights[];
};

shared vec4 cache[GROUP_SIZE + 2 * MAXIMUM_KERNEL_WIDTH];

void main() {
    int n = weights.length();
    int m = n / 2;
    int cacheSize = GROUP_SIZE + 2 * m;
    //ceil(cache size / group size)
    int numberPixelsToLoad = (cacheSize + (GROUP_SIZE - 1)) / GROUP_SIZE;

    ivec2 size = imageSize(inputImage);
    ivec2 textureCoords = ivec2(gl_GlobalInvocationID.xy);
    //int(gl_WorkGroupID.x) * GROUP_SIZE - starting position of current block within image
    int origin = int(gl_WorkGroupID.x) * GROUP_SIZE - m; //starting position of first sample for blur
    //every run should load numberPixelsToLoad
    for (int i = 0; i < numberPixelsToLoad; ++i) {
        int local = int(gl_LocalInvocationID.x) * numberPixelsToLoad + i;
        if (local < cacheSize) {
            //global position of current pixel
            int pc = origin + local;

            if (pc >= 0 && pc < size.x)
                cache[local] = imageLoad(inputImage, ivec2(pc, textureCoords.y));
        }
    }

    memoryBarrierShared();
    barrier();

    if (textureCoords.x < size.x && textureCoords.y < size.y) {
        vec4 sum = vec4(0.0);
        //-m:n - m
        //n = 5, m = 2, [-2, 3)
        for (int i = 0; i < n; ++i) {
            //current pixel in global coords
            ivec2 pc = textureCoords + ivec2(i - m, 0);
            if (pc.x < 0) pc.x = 0;
            if (pc.x >= size.x) pc.x = size.x - 1;
            //convert global current pixel to local position in cache
            int local = pc.x - origin;

            sum += weights[i] * cache[local];
        }

        imageStore(resultImage, textureCoords, sum);
    }
}