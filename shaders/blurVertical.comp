#version 450

const int GROUP_SIZE = 64;
layout (local_size_x = 1, local_size_y = 64) in;
layout (set = 0, binding = 0, rgba8) uniform readonly mediump image2D inputImage;
layout (set = 0, binding = 1, rgba8) uniform writeonly mediump image2D resultImage;

const int M = 16;
const int N = 2 * M + 1;

const float weight[N] = float[N] (
    0.012318109844189502,
    0.014381474814203989,
    0.016623532195728208,
    0.019024086115486723,
    0.02155484948872149,
    0.02417948052890078,
    0.02685404941667096,
    0.0295279624870386,
    0.03214534135442581,
    0.03464682117793548,
    0.0369716985390341,
    0.039060328279673276,
    0.040856643282313365,
    0.04231065439216247,
    0.043380781642569775,
    0.044035873841196206,
    0.04425662519949865,
    0.044035873841196206,
    0.043380781642569775,
    0.04231065439216247,
    0.040856643282313365,
    0.039060328279673276,
    0.0369716985390341,
    0.03464682117793548,
    0.03214534135442581,
    0.0295279624870386,
    0.02685404941667096,
    0.02417948052890078,
    0.02155484948872149,
    0.019024086115486723,
    0.016623532195728208,
    0.014381474814203989,
    0.012318109844189502
);
const int CACHE_SIZE = GROUP_SIZE + 2 * M;
//ceil(cache size / group size)
const int LOAD = (CACHE_SIZE + (GROUP_SIZE - 1)) / GROUP_SIZE;
shared vec4 cache[CACHE_SIZE];

void main() {
    ivec2 size = imageSize(inputImage);
    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);

    int origin = int(gl_WorkGroupID.y) * GROUP_SIZE - M;

    for (int i = 0; i < LOAD; ++i) {
        int local = int(gl_LocalInvocationID.y) * LOAD + i;
        if (local < CACHE_SIZE) {
            int pc = origin + local;

            if (pc >= 0 && pc < size.y)
                cache[local] = imageLoad(inputImage, ivec2(pixelCoord.x, pc));
        }
    }

    memoryBarrierShared();
    barrier();

    if (pixelCoord.x < size.x && pixelCoord.y < size.y) {
        vec4 sum = vec4(0.0);

        for (int i = 0; i < N; ++i) {
            ivec2 pc = pixelCoord + ivec2(0, i - M);
            if (pc.y < 0) pc.y = 0;
            if (pc.y >= size.y) pc.y = size.y - 1;

            int local = pc.y - origin;

            sum += weight[i] * cache[local];
        }

        imageStore(resultImage, pixelCoord, sum);
    }
}