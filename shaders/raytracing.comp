#version 450

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba8) uniform writeonly image2D resultImage;

struct Sphere {
  vec3 center;
  float radius;
};

#define MAX_SPHERES 10
Sphere spheres[MAX_SPHERES];
int spheresNumber = 2;

struct Ray {
  vec3 origin;
  vec3 direction;
};

//gl_GlobalInvocationID.x, gl_GlobalInvocationID.y
//ivec2 dim = imageSize(resultImage);

//t2b⋅b+2tb⋅(A−C)+(A−C)⋅(A−C)−r2=0
float hitSphere(Ray ray, Sphere sphere) {
  vec3 oc = ray.origin - sphere.center;
  float a = dot(ray.direction, ray.direction);
  float b = 2 * dot(ray.direction, oc);
  float c = dot(oc, oc) - sphere.radius * sphere.radius;
  float disc = b * b - 4 * a * c;
  if (disc < 0)
    return -1;
  else
    return (-b - sqrt(disc) ) / (2.0*a);
}

vec3 rayColor(Ray ray, Sphere spheres[MAX_SPHERES]) {
  for (int i = 0; i < spheresNumber; i++) {
    Sphere sphere = spheres[i];
    float t = hitSphere(ray, sphere);
    if (t > 0.0) {
      //normal = point on ray that intersect shpere - sphere center
      vec3 normal = normalize(vec3(ray.origin + ray.direction * t - sphere.center));
      //map -1 1 range to 0 1 range
      return 0.5 * vec3(normal.x + 1, normal.y + 1, normal.z + 1);
    }
  }
  float t = 0.5 * (ray.direction.y + 1);
  return (1.0 - t) * vec3(1.0, 1.0, 1.0) + t * vec3(0.5, 0.7, 1.0);
}


void main()
{
  ivec2 dim = imageSize(resultImage);
  //need to pass via uniform
  float aspect = 800.0 / 592.0;
  float focalLength = 1;

  //range is [0, 1]
  vec2 uv = vec2(gl_GlobalInvocationID.xy) / dim;

  //should be origin of camera
  vec3 rayO = vec3(0.0, 0.0, 0.0);
  //assume surface size as -1 1 but need to take in account aspect ratio
  //assume f is 1
  vec3 rayE = vec3((uv * 2.0 - 1.0) * vec2(aspect, 1.0), -focalLength);
  Ray ray = Ray(rayO, normalize(rayE - rayO));
  spheres[0] = Sphere(vec3(0.0, 0.0, -1.0), 0.5);
  spheres[1] = Sphere(vec3(0.0, -100.5, -1.0), 100);
  vec3 color = rayColor(ray, spheres);
  imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1.0));
}