#version 450

layout (local_size_x = 8, local_size_y = 8) in;
layout(binding = 0) uniform UniformCamera {
  float fov;
  vec3 origin;
  mat4 camera;
} camera;

layout (binding = 1, rgba8) uniform writeonly image2D resultImage;
//gl_GlobalInvocationID.x, gl_GlobalInvocationID.y
//ivec2 dim = imageSize(resultImage);

#define AA_SAMPLES 100
#define MAX_SPHERES 300
#define MAX_RECTANGLES 100
#define MAX_HITBOXES 300
#define MAX_DEPTH 50

#define MATERIAL_DIFFUSE 0
#define MATERIAL_METAL 1
#define MATERIAL_DIELECTRIC 2
#define MATERIAL_EMISSIVE 3

#define PRIMITIVE_SPHERE 0
#define PRIMITIVE_RECTANGLE 1
#define PI 3.1415926538

struct Material {
  int type;
  vec3 attenuation;
  //actual only for metal
  float fuzz;
  //actual only for dielectric (etaIn / etaOut)
  float refraction;
};

struct Sphere {
  vec3 center;
  float radius;
  Material material;
};

layout (binding = 2) uniform Spheres {
  int spheresNumber;
  Sphere spheres[MAX_SPHERES];
};

struct Rectangle {
  vec3 min;
  vec3 max;
  int fixedAxis;
  Material material;
};

layout (binding = 3) uniform Rectangles {
  int rectanglesNumber;
  Rectangle rectangles[MAX_RECTANGLES];
};

Rectangle lightRectangle;

struct Hitbox {
  vec3 min;
  vec3 max;
  int next;
  int exit;
  int primitive;
  int index;
};

layout (binding = 4) uniform Hitboxes {
  int hitboxNumber;
  Hitbox hitboxes[MAX_HITBOXES];
};

uint seed;

struct Ray {
  vec3 origin;
  vec3 direction;
};

struct HitRecord {
  vec3 normal;
  vec3 point;
  float t;
  Material material;
  bool frontFace;
};

struct ONB {
  vec3 axes[3];
};

layout (binding = 5) uniform Settings {
  int useBVH;
} settings;

vec3 backgroundColor = vec3(0.0, 0.0, 0.0);

//https://github.com/GPSnoopy/RayTracingInVulkan/blob/master/assets/shaders/Random.glsl
uint InitRandomSeed(uint val0, uint val1)
{
  uint v0 = val0, v1 = val1, s0 = 0;

  for (uint n = 0; n < 16; n++)
  {
    s0 += 0x9e3779b9;
    v0 += ((v1 << 4) + 0xa341316c) ^ (v1 + s0) ^ ((v1 >> 5) + 0xc8013ea4);
    v1 += ((v0 << 4) + 0xad90777d) ^ (v0 + s0) ^ ((v0 >> 5) + 0x7e95761e);
  }

  return v0;
}

uint RandomInt() {
  // LCG values from Numerical Recipes
    return (seed = 1664525 * seed + 1013904223);
}

float RandomFloat() {
  //// Float version using bitmask from Numerical Recipes
  //const uint one = 0x3f800000;
  //const uint msk = 0x007fffff;
  //return uintBitsToFloat(one | (msk & (RandomInt() >> 9))) - 1;

  // Faster version from NVIDIA examples; quality good enough for our use case.
  return (float(RandomInt() & 0x00FFFFFF) / float(0x01000000));
}

float RandomFloat(float min, float max) {
  return min + (max - min) * RandomFloat();
}

vec3 RandomInUnitSphere() {
  for (;;)
  {
    const vec3 p = 2 * vec3(RandomFloat(), RandomFloat(), RandomFloat()) - 1;
    if (dot(p, p) < 1)
    {
      return p;
    }
  }
}

vec3 RandomInHemiSphere(vec3 normal) {
  vec3 inUnitSphere = RandomInUnitSphere();
  if (dot(inUnitSphere, normal) > 0.0) // In the same hemisphere as the normal
    return inUnitSphere;
  else
    return -inUnitSphere;
}

// Use Schlick's approximation for reflectance.
float reflectance(float cosine, float refraction) {
 float r0 = (1 - refraction) / (1 + refraction);
 r0 = r0 * r0;
 return r0 + (1 - r0) * pow((1 - cosine), 5);
}

//glsl has own function refract
vec3 refractRay(vec3 direction, vec3 normal, float refraction) {
  float angleCos = min(dot(-direction, normal), 1.0);
  vec3 perpPart =  refraction * (direction + angleCos * normal);
  vec3 parallelPart = -sqrt(abs(1.0 - pow(length(perpPart), 2))) * normal;
  return perpPart + parallelPart;
}

//glsl has own function reflect
vec3 reflectRay(vec3 v, vec3 n) {
  return v - 2 * dot(v, n) * n;
}

bool dielectricMaterial(HitRecord hitRecord, inout Ray ray, inout vec3 color) {
  bool outside = true;
  vec3 normal = hitRecord.normal;
  float refraction = hitRecord.material.refraction;

  //ray is inside the sphere
  if (hitRecord.frontFace == false) {
    outside = false;
    refraction = 1 / hitRecord.material.refraction;
  }

  //check if refraction is possible
  float angleCos = min(dot(-ray.direction, normal), 1.0);
  float angleSin = sqrt(1.0 - pow(angleCos, 2));
  bool cannotRefract = refraction * angleSin > 1.0;
  vec3 direction;
  //Frenels equation says how many rays should reflect, value is [0, 1], so we treat reflectance as probability
  if (cannotRefract || reflectance(angleCos, refraction) > RandomFloat())
    direction = reflectRay(ray.direction, normal);
  else
    direction = refractRay(ray.direction, normal, refraction);

  ray = Ray(hitRecord.point, normalize(direction));

  return true;
}


bool nearZero(vec3 v) {
  // Return true if the vector is close to zero in all dimensions.
  float s = 1e-8;
  return (abs(v.x) < s) && (abs(v.y) < s) && (abs(v.z) < s);
}

//t2b⋅b+2tb⋅(A−C)+(A−C)⋅(A−C)−r2=0
float hitSphere(Ray ray, Sphere sphere, float tMin, float tMax, inout HitRecord hitRecord) {
  float t = -1;
  bool found = false;
  vec3 oc = ray.origin - sphere.center;
  float a = dot(ray.direction, ray.direction);
  float b = 2 * dot(ray.direction, oc);
  float c = dot(oc, oc) - sphere.radius * sphere.radius;
  float disc = b * b - 4 * a * c;
  if (disc < 0)
    return -1;
  float sqrtd = sqrt(disc);
  float root1 = (-b - sqrtd ) / (2.0*a);
  if (root1 >= tMin && root1 <= tMax) {
    t = root1;
    found = true;
  } else {
    float root2 = (-b + sqrtd ) / (2.0*a);
    if (root2 >= tMin && root2 <= tMax) {
      t = root2;
      found = true;
    }
  }
  
  if (found == false)
    return -1;

  //fill hit record
  hitRecord.material = sphere.material;
  hitRecord.point = ray.origin + ray.direction * t;
  //normal = point on ray that intersect shpere - sphere center
  hitRecord.normal = (hitRecord.point - sphere.center) / sphere.radius;
  //need remember frontFace because if we change normal sign we can't determine whether ray came from outside or inside
  hitRecord.frontFace = true;
  if (dot(ray.direction, hitRecord.normal) > 0) {
    //change normal direction so there is no difference in calculation for ray outside and inside because normal is always against ray
    hitRecord.normal = -hitRecord.normal;
    hitRecord.frontFace = false;
  }

  return t;
}

float hitRectangle(Ray ray, Rectangle rectangle, float tMin, float tMax, inout HitRecord hitRecord) {
  int axis = rectangle.fixedAxis;
  //find t for X axis
  float t = (rectangle.min[axis] - ray.origin[axis]) / ray.direction[axis];
  if (t < tMin || t > tMax)
    return -1;
  
  for (int i = 0; i < 3; i++) {
    if (i == axis)
      continue;

    float v = ray.origin[i] + t * ray.direction[i];
    if (v < rectangle.min[i] || v > rectangle.max[i])
      return -1;
  }

  //fill hit record
  hitRecord.material = rectangle.material;
  hitRecord.point = ray.origin + ray.direction * t;
  hitRecord.normal = vec3(0, 0, 0);
  hitRecord.normal[rectangle.fixedAxis] = 1;
  hitRecord.frontFace = true;
  if (dot(ray.direction, hitRecord.normal) > 0) {
    //change normal direction so there is no difference in calculation for ray from front or behind (because normal is fixed in direction)
    hitRecord.normal = -hitRecord.normal;
    hitRecord.frontFace = false;
  }

  return t;
}

bool hitBoundingBox(Ray ray, Hitbox bb, float tMin, float tMax) {
  vec3 first = (bb.min - ray.origin) / ray.direction;
  vec3 second = (bb.max - ray.origin) / ray.direction;
  for (int i = 0; i < 3; i++) {
    float t0 = min(first[i], second[i]);
    float t1 = max(first[i], second[i]);
    tMin = max(t0, tMin);
    tMax = min(t1, tMax);
    if (tMax <= tMin)
      return false;

  }
  return true;
}

bool hitWorldBVH(Ray ray, float tMin, float tMax, inout HitRecord hitRecord) {
  bool hit = false;
  int boxIndex = 0;
  while (boxIndex != -1) {
    Hitbox current = hitboxes[boxIndex];
    boxIndex = current.exit;
    if (hitBoundingBox(ray, current, tMin, tMax)) {
      boxIndex = current.next;
      if (current.primitive != -1) {
        if (current.primitive == PRIMITIVE_SPHERE) {
          //hit
          Sphere sphere = spheres[current.index];
          float t = hitSphere(ray, sphere, tMin, tMax, hitRecord);
          if (t > 0.0) {
            tMax = t;
            hit = true;
          }
        } else if (current.primitive == PRIMITIVE_RECTANGLE) {
          Rectangle rectangle = rectangles[current.index];
          float t = hitRectangle(ray, rectangle, tMin, tMax, hitRecord);
          if (t > 0.0) {
            tMax = t;
            hit = true;
          }
        }
      }
    }
  }

  return hit;
}

bool hitWorld(Ray ray, float tMin, float tMax, inout HitRecord hitRecord) {
  bool hit = false;
  //check if ray hit object, pick the closest object and generate reflected ray
  for (int i = 0; i < spheresNumber; i++) {
    Sphere sphere = spheres[i];
    //first check bounding box
    float t = hitSphere(ray, sphere, tMin, tMax, hitRecord);
    if (t > 0.0) {
      tMax = t;
      hit = true;
    }
  }

  for (int i = 0; i < rectanglesNumber; i++) {
    Rectangle rectangle = rectangles[i];
    float t = hitRectangle(ray, rectangle, tMin, tMax, hitRecord);
    if (t > 0.0) {
      tMax = t;
      hit = true;
    }
  }

  return hit;
}

vec3 randomCosineDirection() {
  float r1 = RandomFloat();
  float r2 = RandomFloat();
  float z = sqrt(1 - r2);

  float phi = 2 * PI * r1;
  float x = cos(phi) * sqrt(r2);
  float y = sin(phi) * sqrt(r2);

  return vec3(x, y, z);
}

ONB buildONB(vec3 normal) {
  ONB onb;
  onb.axes[2] = normalize(normal);
  vec3 a = vec3(1,0,0);
  if (abs(onb.axes[2].x) > 0.9) a = vec3(0,1,0);
  onb.axes[1] = normalize(cross(onb.axes[2], a));
  onb.axes[0] = cross(onb.axes[2], onb.axes[1]);
  return onb;
}

vec3 cosineDirection(vec3 normal, inout ONB onb) {
  onb = buildONB(normal);
  vec3 tmp = randomCosineDirection();
  vec3 direction = onb.axes[0] * tmp.x + onb.axes[1] * tmp.y + onb.axes[2] * tmp.z;
  direction = normalize(direction);
  return direction;
}

vec3 randomRectangleDirection(Rectangle rectangle, vec3 origin) {
  vec3 randomPoint = vec3(RandomFloat(rectangle.min.x, rectangle.max.x), rectangle.min.y, RandomFloat(rectangle.min.z, rectangle.max.z));
  return randomPoint - origin;
}


float lightRectanglePDF(Rectangle lightRectangle, vec3 origin, vec3 direction) {
  HitRecord hitRecord;
  float tMin = 0.001;
  float tMax = 100000;
  Ray ray = Ray(origin, direction);
  float t = hitRectangle(ray, lightRectangle, tMin, tMax, hitRecord);
  if (t < 0)
    return 0;

  float area = (lightRectangle.max.x - lightRectangle.min.x) * (lightRectangle.max.z - lightRectangle.min.z);
  float directionSquared = dot(direction, direction);
  float distanceSquared = t * t * directionSquared;
  float cosine = abs(dot(direction, hitRecord.normal) / length(direction));

  return distanceSquared / (cosine * area);
}

float diffuseScatteringPdf(HitRecord hitRecord, Ray scattered) {
  float cosine = dot(hitRecord.normal, normalize(scattered.direction));
  float pdf = 0;
  if (cosine >= 0)
    pdf = cosine / PI;
  return pdf;
}

bool metalMaterial(HitRecord hitRecord, inout Ray ray, inout vec3 color) {
  vec3 direction = reflectRay(ray.direction, hitRecord.normal);
  ray = Ray(hitRecord.point, normalize(direction + hitRecord.material.fuzz * RandomInUnitSphere()));
  color *= hitRecord.material.attenuation;
  return (dot(direction, hitRecord.normal) > 0);
}

bool diffuseMaterial(HitRecord hitRecord, inout Ray ray, inout vec3 color, inout float pdfCoeff) {
  //half of color is absorbing and half reflecting
  color *= hitRecord.material.attenuation;
  vec3 direction;
  //1
  //direction = hitRecord.normal + RandomInUnitSphere();
  //if direction == 0 we will have issues with such direction (nan, undefined behavior)
  //if (nearZero(direction)) {
    //direction = hitRecord.normal;
  //}
  //2
  //direction = RandomInHemiSphere(hitRecord.normal);  
  //3
  //ONB onb;
  //direction = cosineDirection(hitRecord.normal, onb);
  //4
  //direction = randomRectangleDirection(lightRectangle, hitRecord.point);
  //5
  ONB onb;
  if (RandomFloat() < 0.5) {
    direction = randomRectangleDirection(lightRectangle, hitRecord.point);
  } else {
    direction = cosineDirection(hitRecord.normal, onb);
  }

  //bdrf
  //1
  //float pdf = dot(hitRecord.normal, direction) / PI;
  //2
  //float pdf = 0.5 / PI;
  //3
  //float pdf = dot(onb.axes[2], direction) / PI;
  //4 directly to light
  //float pdf = lightRectanglePDF(lightRectangle, hitRecord.point, direction);
  //5 mix light + cos  
  float pdf = 0.5 * lightRectanglePDF(lightRectangle, hitRecord.point, direction) + 0.5 * dot(onb.axes[2], direction) / PI;

  ray = Ray(hitRecord.point, direction);
  pdfCoeff *= diffuseScatteringPdf(hitRecord, ray) / pdf;
  return true;
}

vec3 rayColor(Ray ray) {
  vec3 resultColor = vec3(1.0, 1.0, 1.0);
  vec3 emissive = vec3(0.0, 0.0, 0.0);
  float pdfCoeff = 1.0;
  int depth = MAX_DEPTH;
  while (depth > 0) {
    HitRecord hitRecord;
    //check if ray hit object, pick the closest object and generate reflected ray
    bool hit = false;
    if (settings.useBVH == 0)
      hit = hitWorld(ray, 0.001, 100000, hitRecord);
    else  
      hit = hitWorldBVH(ray, 0.001, 100000, hitRecord);
    if (hit) {
      bool success;
      if (hitRecord.material.type == MATERIAL_DIFFUSE) {
        success = diffuseMaterial(hitRecord, ray, resultColor, pdfCoeff);
      }
      if (hitRecord.material.type == MATERIAL_METAL) {
        success = metalMaterial(hitRecord, ray, resultColor);
      }
      if (hitRecord.material.type == MATERIAL_DIELECTRIC) {
        success = dielectricMaterial(hitRecord, ray, resultColor);
      }
      if (hitRecord.material.type == MATERIAL_EMISSIVE) {
        //Actually we have to check front face == true to disable emmisive in both directions, but works with front face == false
        if (hitRecord.frontFace == false) {
          return resultColor * pdfCoeff * hitRecord.material.attenuation;
        }
        else
          return vec3(0, 0, 0);
      }
      //if some error (mirrored ray goes exactly with the same direction back, i.e. input direction = output direction, so infinite bounces)
      //we break calculations
      if (success == false) {
        depth = 0;
        break;
      }
      depth -= 1;
    } else {
      break;
    }
  }

  //objects are dark, only background has color
  if (depth <= 0)
    return vec3(0.0, 0.0, 0.0);

  return resultColor * pdfCoeff * backgroundColor;
}

void main() {
  seed = InitRandomSeed(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
  ivec2 dim = imageSize(resultImage);
  //need to pass via uniform
  float aspect = 800.0 / 592.0;
  float focalLength = 1.0;
  vec3 cameraOrigin = vec3(0.0, 0.0, 0.0);

  //TODO: generate once outside shader
  vec2 aa[AA_SAMPLES];
  int number = 0;
  for (int i = 0; i < sqrt(AA_SAMPLES); i++) {
    for (int j = 0; j < sqrt(AA_SAMPLES); j++) {
      aa[number] = vec2(0.25 * (2 * j + 1), 0.25 * (2 * i + 1));
      number += 1;
    }
  }

  //find light to generate additional rays
  for (int i = 0; i < rectanglesNumber; i++) {
    if (rectangles[i].material.type == MATERIAL_EMISSIVE)
      lightRectangle = rectangles[i];
  }

  vec3 result = vec3(0.0, 0.0, 0.0);
  for (int i = 0; i < AA_SAMPLES; i++) {
    //range is [0, 1]
    vec2 uv = (gl_GlobalInvocationID.xy + aa[i]) / dim;
    //should be origin of camera
    vec3 rayO = cameraOrigin;
    //assume surface size as -1 1 but need to take in account aspect ratio
    //assume f is 1
    vec3 rayE = vec3((uv * 2.0 - 1.0) * vec2(aspect, 1.0) * camera.fov, -focalLength);

    vec4 rayOCamera = (camera.camera * vec4(rayO, 1));
    vec4 rayECamera = (camera.camera * vec4(rayE, 1));

    Ray ray = Ray(camera.origin, normalize(rayECamera.xyz - rayOCamera.xyz));
    vec3 color = rayColor(ray);
    //if NAN just ignore this color
    if (color.r != color.r) color.r = 0;
    if (color.g != color.g) color.g = 0;
    if (color.b != color.b) color.b = 0;
    result += color;
  }
  result /= AA_SAMPLES;

  imageStore(resultImage, ivec2(gl_GlobalInvocationID.x, dim.y - gl_GlobalInvocationID.y), vec4(result, 1.0));
}