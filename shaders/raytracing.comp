#version 450

layout (local_size_x = 16, local_size_y = 16) in;
layout(binding = 0) uniform UniformCamera {
  float fov;
  vec3 origin;
  mat4 camera;
} camera;

layout (binding = 1, rgba8) uniform writeonly image2D resultImage;
//gl_GlobalInvocationID.x, gl_GlobalInvocationID.y
//ivec2 dim = imageSize(resultImage);

#define AA_SAMPLES 100
#define MAX_SPHERES 30
#define MAX_HITBOXES 30
#define MAX_DEPTH 50

#define MATERIAL_DIFFUSE 0
#define MATERIAL_METAL 1
#define MATERIAL_DIELECTRIC 2

struct Material {
  int type;
  vec3 attenuation;
  //actual only for metal
  float fuzz;
  //actual only for dielectric (etaIn / etaOut)
  float refraction;
};

struct Sphere {
  vec3 center;
  float radius;
  int index;
  Material material;
};

layout (binding = 2) uniform Spheres {
  int spheresNumber;
  Sphere spheres[MAX_SPHERES];
};

struct Hitbox {
  vec3 center;
  vec3 bias;
  int left;
  int right;
  int sphere;
};

layout (binding = 3) uniform Hitboxes {
  int hitboxNumber;
  Hitbox hitboxes[MAX_HITBOXES];
};

uint seed;

struct Ray {
  vec3 origin;
  vec3 direction;
};

struct HitRecord {
  vec3 normal;
  vec3 point;
  float t;
  Material material;
  bool frontFace;
};

//https://github.com/GPSnoopy/RayTracingInVulkan/blob/master/assets/shaders/Random.glsl
uint InitRandomSeed(uint val0, uint val1)
{
  uint v0 = val0, v1 = val1, s0 = 0;

  for (uint n = 0; n < 16; n++)
  {
    s0 += 0x9e3779b9;
    v0 += ((v1 << 4) + 0xa341316c) ^ (v1 + s0) ^ ((v1 >> 5) + 0xc8013ea4);
    v1 += ((v0 << 4) + 0xad90777d) ^ (v0 + s0) ^ ((v0 >> 5) + 0x7e95761e);
  }

  return v0;
}

uint RandomInt(inout uint seed)
{
  // LCG values from Numerical Recipes
    return (seed = 1664525 * seed + 1013904223);
}

float RandomFloat(inout uint seed)
{
  //// Float version using bitmask from Numerical Recipes
  //const uint one = 0x3f800000;
  //const uint msk = 0x007fffff;
  //return uintBitsToFloat(one | (msk & (RandomInt(seed) >> 9))) - 1;

  // Faster version from NVIDIA examples; quality good enough for our use case.
  return (float(RandomInt(seed) & 0x00FFFFFF) / float(0x01000000));
}

vec3 RandomInUnitSphere(inout uint seed) {
  for (;;)
  {
    const vec3 p = 2 * vec3(RandomFloat(seed), RandomFloat(seed), RandomFloat(seed)) - 1;
    if (dot(p, p) < 1)
    {
      return p;
    }
  }
}

// Use Schlick's approximation for reflectance.
float reflectance(float cosine, float refraction) {
 float r0 = (1 - refraction) / (1 + refraction);
 r0 = r0 * r0;
 return r0 + (1 - r0) * pow((1 - cosine), 5);
}

//glsl has own function refract
vec3 refractRay(vec3 direction, vec3 normal, float refraction) {
  float angleCos = min(dot(-direction, normal), 1.0);
  vec3 perpPart =  refraction * (direction + angleCos * normal);
  vec3 parallelPart = -sqrt(abs(1.0 - pow(length(perpPart), 2))) * normal;
  return perpPart + parallelPart;
}

//glsl has own function reflect
vec3 reflectRay(vec3 v, vec3 n) {
  return v - 2 * dot(v, n) * n;
}

bool dielectricMaterial(HitRecord hitRecord, inout Ray ray, inout vec3 color) {
  bool outside = true;
  vec3 normal = hitRecord.normal;
  float refraction = hitRecord.material.refraction;

  //ray is inside the sphere
  if (hitRecord.frontFace == false) {
    outside = false;
    refraction = 1 / hitRecord.material.refraction;
  }

  //check if refraction is possible
  float angleCos = min(dot(-ray.direction, normal), 1.0);
  float angleSin = sqrt(1.0 - pow(angleCos, 2));
  bool cannotRefract = refraction * angleSin > 1.0;
  vec3 direction;
  //Frenels equation says how many rays should reflect, value is [0, 1], so we treat reflectance as probability
  if (cannotRefract || reflectance(angleCos, refraction) > RandomFloat(seed))
    direction = reflectRay(ray.direction, normal);
  else
    direction = refractRay(ray.direction, normal, refraction);

  ray = Ray(hitRecord.point, normalize(direction));

  return true;
}


bool nearZero(vec3 v) {
  // Return true if the vector is close to zero in all dimensions.
  float s = 1e-8;
  return (abs(v.x) < s) && (abs(v.y) < s) && (abs(v.z) < s);
}

bool metalMaterial(HitRecord hitRecord, inout Ray ray, inout vec3 color) {
  vec3 direction = reflectRay(ray.direction, hitRecord.normal);
  ray = Ray(hitRecord.point, normalize(direction + hitRecord.material.fuzz * RandomInUnitSphere(seed)));
  color *= hitRecord.material.attenuation;
  return (dot(direction, hitRecord.normal) > 0);
}

bool diffuseMaterial(HitRecord hitRecord, inout Ray ray, inout vec3 color) {
  vec3 direction = hitRecord.normal + RandomInUnitSphere(seed);
  //if direction == 0 we will have issues with such direction (nan, undefined behavior)
  if (nearZero(direction)) {
    direction = hitRecord.normal;
  }
  ray = Ray(hitRecord.point, normalize(direction));
  //half of color is absorbing and half reflecting
  color *= hitRecord.material.attenuation;
  return true;
}

//t2b⋅b+2tb⋅(A−C)+(A−C)⋅(A−C)−r2=0
float hitSphere(Ray ray, Sphere sphere, float tMin, float tMax) {
  vec3 oc = ray.origin - sphere.center;
  float a = dot(ray.direction, ray.direction);
  float b = 2 * dot(ray.direction, oc);
  float c = dot(oc, oc) - sphere.radius * sphere.radius;
  float disc = b * b - 4 * a * c;
  if (disc < 0)
    return -1;
  float sqrtd = sqrt(disc);
  float root1 = (-b - sqrtd ) / (2.0*a);
  if (root1 >= tMin && root1 <= tMax)
    return root1;

  float root2 = (-b + sqrtd ) / (2.0*a);
  if (root2 >= tMin && root2 <= tMax)
    return root2;

  return -1;
}

bool hitBoundingBox(Ray ray, Hitbox bb, float tMin, float tMax) {
  vec3 bbMin = bb.center - bb.bias;
  vec3 bbMax = bb.center + bb.bias;
  vec3 first = (bbMin - ray.origin) / ray.direction;
  vec3 second = (bbMax - ray.origin) / ray.direction;
  for (int i = 0; i < 3; i++) {
    float t0 = min(first[i], second[i]);
    float t1 = max(first[i], second[i]);
    tMin = max(t0, tMin);
    tMax = min(t1, tMax);
    if (tMax <= tMin)
      return false;

  }
  return true;
}

int queue[MAX_HITBOXES];
bool visited[MAX_HITBOXES];
int spheresIdx[MAX_SPHERES];
int sphereFromHitbox(Ray ray, float tMin, float tMax) {
  int spheresNumber = 0;
  int current = 0;
  for (int i = 0; i < hitboxNumber; i++) {
    queue[i] = -1;
    visited[i] = false;
  }

  //the biggest one
  queue[current] = hitboxNumber - 1;
  visited[queue[current]] = true;
  current++;
  for (int i = 0; i < hitboxNumber; i++) {
    int currentQueue = queue[i];
    if (currentQueue == -1)
      break;

    Hitbox currentHitbox = hitboxes[currentQueue];
    if (hitBoundingBox(ray, currentHitbox, tMin, tMax)) {
      bool child = false;
      if (currentHitbox.left != -1 && visited[currentHitbox.left] == false) {
        queue[current] = currentHitbox.left;
        current++;
        child = true;
      } 
      if (currentHitbox.right != -1 && visited[currentHitbox.right] == false) {
        queue[current] = currentHitbox.right;
        current++;
        child = true;
      }
      if (child == false) {
        spheresIdx[spheresNumber] = currentHitbox.sphere;
        spheresNumber++;
      }
    }
  }
  
  return spheresNumber;
}

bool hitWorld(Ray ray, float tMin, float tMax, inout HitRecord hitRecord) {
  bool hit = false;
  int numberHit = sphereFromHitbox(ray, tMin, tMax);

  if (numberHit == 0)
    return false;

  //check if ray hit object, pick the closest object and generate reflected ray
  for (int i = 0; i < numberHit; i++) {
    Sphere sphere = spheres[spheresIdx[i]];
    //first check bounding box
    float t = hitSphere(ray, sphere, tMin, tMax);
    if (t > 0.0) {
      hitRecord.material = sphere.material;
      hitRecord.point = ray.origin + ray.direction * t;
      //normal = point on ray that intersect shpere - sphere center
      hitRecord.normal = (hitRecord.point - sphere.center) / sphere.radius;
      //need remember frontFace because if we change normal sign we can't determine whether ray came from outside or inside
      hitRecord.frontFace = true;
      if (dot(ray.direction, hitRecord.normal) > 0) {
        //change normal direction so there is no difference in calculation for ray outside and inside because normal is always against ray
        hitRecord.normal = -hitRecord.normal;
        hitRecord.frontFace = false;
      }

      tMax = t;
      hit = true;
    }
  }

  return hit;
}

vec3 rayColor(Ray ray) {
  vec3 resultColor = vec3(1.0, 1.0, 1.0);
  int depth = MAX_DEPTH;
  while (depth > 0) {
    bool hit = false;
    HitRecord hitRecord;
    //check if ray hit object, pick the closest object and generate reflected ray
    if (hitWorld(ray, 0.001, 100000, hitRecord)) {
      bool success;
      if (hitRecord.material.type == MATERIAL_DIFFUSE) {
        success = diffuseMaterial(hitRecord, ray, resultColor);
      }
      if (hitRecord.material.type == MATERIAL_METAL) {
        success = metalMaterial(hitRecord, ray, resultColor);
      }
      if (hitRecord.material.type == MATERIAL_DIELECTRIC) {
        success = dielectricMaterial(hitRecord, ray, resultColor);
      }


      //if some error (mirrored ray goes exactly with the same direction back, i.e. input direction = output direction, so infinite bounces)
      //we break calculations
      if (success == false) {
        depth = 0;
        break;
      }
      depth -= 1;
    } else {
      break;
    }
  }

  //objects are dark, only background has color
  if (depth <= 0)
    return vec3(0.0, 0.0, 0.0);

  float t = 0.5 * (ray.direction.y + 1);
  return resultColor * ((1.0 - t) * vec3(1.0, 1.0, 1.0) + t * vec3(0.5, 0.7, 1.0));
}

void main() {
  seed = InitRandomSeed(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
  ivec2 dim = imageSize(resultImage);
  //need to pass via uniform
  float aspect = 800.0 / 592.0;
  float focalLength = 1.0;
  vec3 cameraOrigin = vec3(0.0, 0.0, 0.0);

  /*spheres[0] = Sphere(vec3(0.0, -1000, 0.0), 1000, Material(MATERIAL_DIFFUSE, vec3(0.5, 0.5, 0.5), 0.0, 1.0));  
  spheres[1] = Sphere(vec3(0.0, 1.0, 0.0), 1.0, Material(MATERIAL_DIELECTRIC, vec3(1.0, 1.0, 1.0), 0.0, 1.0 / 1.5));
  spheres[2] = Sphere(vec3(-4, 1, 0), 1.0, Material(MATERIAL_METAL, vec3(1.0, 1.0, 1.0), 0.0, 1.0));
  spheres[3] = Sphere(vec3(4.0, 1.0, 0.0), 1.0, Material(MATERIAL_METAL, vec3(0.7, 0.6, 0.5), 0.0, 1.0));

  spheres[4] = Sphere(vec3(-2.0, 1, 1.0), -0.3, Material(MATERIAL_DIELECTRIC, vec3(0.5, 0.1, 0.5), 0.0, 1.0 / 1.5));  
  spheres[5] = Sphere(vec3(2.0, 0.5, 1.0), 0.3, Material(MATERIAL_DIELECTRIC, vec3(0.0, 1.0, 1.0), 0.0, 1.0 / 1.2));
  spheres[6] = Sphere(vec3(-1.5, 1.5, 1.5), 0.3, Material(MATERIAL_DIFFUSE, vec3(0.8, 0.2, 0.8), 0.0, 1.0));
  spheres[7] = Sphere(vec3(0.8, 1.8, 1.5), 0.3, Material(MATERIAL_METAL, vec3(0.7, 0.6, 0.5), 1.0, 1.0));

  spheresNumber = 8;*/
  
  //TODO: generate once outside shader
  vec2 aa[AA_SAMPLES];
  int number = 0;
  for (int i = 0; i < sqrt(AA_SAMPLES); i++) {
    for (int j = 0; j < sqrt(AA_SAMPLES); j++) {
      aa[number] = vec2(0.25 * (2 * j + 1), 0.25 * (2 * i + 1));
      number += 1;
    }
  }
  vec3 result = vec3(0.0, 0.0, 0.0);
  for (int i = 0; i < AA_SAMPLES; i++) {
    //range is [0, 1]
    vec2 uv = (gl_GlobalInvocationID.xy + aa[i]) / dim;
    //should be origin of camera
    vec3 rayO = cameraOrigin;
    //assume surface size as -1 1 but need to take in account aspect ratio
    //assume f is 1
    vec3 rayE = vec3((uv * 2.0 - 1.0) * vec2(aspect, 1.0) * camera.fov, -focalLength);

    vec4 rayOCamera = (camera.camera * vec4(rayO, 1));
    vec4 rayECamera = (camera.camera * vec4(rayE, 1));

    Ray ray = Ray(camera.origin, normalize(rayECamera.xyz - rayOCamera.xyz));
    result += rayColor(ray);
  }
  result /= AA_SAMPLES;
  imageStore(resultImage, ivec2(gl_GlobalInvocationID.x, dim.y - gl_GlobalInvocationID.y), vec4(result, 1.0));
}